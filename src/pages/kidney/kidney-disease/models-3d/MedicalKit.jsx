/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState, useEffect, useRef } from 'react'
import { useGLTF, Html } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

const MedicalKit = (props) => {
  const { nodes, materials } = useGLTF('/models-3d/medkit_01.glb')
  const [showInfo, setShowInfo] = useState(false)
  const groupRef = useRef()
  const infoRef = useRef()

  // Animación de "respiración" sutil
  useFrame(({ clock }) => {
    const t = clock.getElapsedTime()
    if (groupRef.current) {
      groupRef.current.position.y = Math.sin(t) * 0.08 // animación sutil
      // Calcula el scale base
      const baseScale = Array.isArray(props.scale)
        ? props.scale[0]
        : (typeof props.scale === "number" ? props.scale : 2.5)
      const animScale = baseScale * (1 + Math.sin(t) * 0.015)
      groupRef.current.scale.set(animScale, animScale, animScale)
    }
  })

  // Ocultar info con teclado solo si está visible
  useEffect(() => {
    if (!showInfo) return
    const handleKeyDown = (e) => {
      if (e.code === "Space" || e.code === "Enter" || e.key === "Escape") {
        setShowInfo(false)
      }
    }
    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown)
  }, [showInfo])

  return (
    <group
      {...props}
      dispose={null}
      ref={groupRef}
      // Quita el prop scale aquí, ya lo maneja la animación
      onPointerOver={() => setShowInfo(true)}
      onPointerOut={() => setShowInfo(false)}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Medkit_1.geometry}
        material={materials.White}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Medkit_2.geometry}
        material={materials.DarkGrey}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Medkit_3.geometry}
        material={materials.Grey}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Medkit_4.geometry}
        material={materials.Red}
      />
      {showInfo && (
        <Html
          ref={infoRef}
          position={[0, -0.10, 0]} // sigue la animación del modelo
          center
          distanceFactor={10}
        >
          <div
            style={{
              background: "rgba(6,86,110,0.85)",
              color: "white",
              padding: "14px 28px",
              borderRadius: "20px",
              fontSize: "17px",
              textAlign: "center",
              boxShadow: "0 4px 24px rgba(0,0,0,0.25)",
              maxWidth: "320px",
              lineHeight: "1.4",
            }}
          >
            <b>Kit Médico</b>
            <ul style={{ textAlign: "left", margin: "10px 0 0 0", paddingLeft: 18 }}>
              <li>Contiene elementos esenciales para la ERC.</li>
              <li><b>Mouse sobre el kit</b>: Ver info</li>
              <li><b>Espacio/Enter/Esc</b>: Ocultar</li>
            </ul>
          </div>
        </Html>
      )}
    </group>
  )
}

export default MedicalKit

useGLTF.preload('/models-3d/medkit_01.glb')